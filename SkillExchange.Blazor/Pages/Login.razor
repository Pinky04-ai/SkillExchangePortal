@* @using SkillExchange.Blazor.Models
@using SkillExchange.Blazor.Services *@
@* @page "/login"
@using MudBlazor
@using SkillExchange.Blazor.Services
@using SkillExchange.Core.DTO
@inject ApiService Api
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex justify-center mt-12">
    <MudPaper Class="pa-8" Elevation="8" Style="width: 100%; border-radius: 12px;">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6" Color="Color.Primary">
            Welcome Back
        </MudText>

        <MudTextField @bind-Value="_model.Email"
                      Label="Email"
                      Required="true"
                      Variant="Variant.Outlined"
                      Class="mb-4"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Email" />

        <MudTextField @bind-Value="_model.Password"
                      Label="Password"
                      InputType="InputType.Password"
                      Required="true"
                      Variant="Variant.Outlined"
                      Class="mb-6"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Lock" />

        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="LoginUser"
                   FullWidth="true"
                   Class="mb-4"
                   Style="height: 45px; font-weight: 600; color:cornflowerblue;font-color:black">
            Login
        </MudButton>

        <MudText Typo="Typo.body2" Align="Align.Center">
            Don't have an account?
            <MudLink Href="/register" Color="Color.Primary" Class="ml-1">Register</MudLink>
        </MudText>

        @if (!string.IsNullOrEmpty(_message))
        {
            <MudText Typo="Typo.body2" Color="Color.Error" Align="Align.Center">@_message</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private LoginDTO _model = new();  
    private string _message;

    private async Task LoginUser()
    {
        try
        {
            var result = await Api.LoginAsync(_model.Email, _model.Password);

            if (result.Contains("Login successful"))
            {
                Nav.NavigateTo("/explore");
            }
            else
            {
                _message = result; 
            }
        }
        catch (Exception ex)
        {
            _message = $"Error: {ex.Message}";
        }
    }
}



@page "/login"
@using SkillExchange.Blazor.Models
@using SkillExchange.Blazor.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-6">
    <MudCard Class="p-6" Elevation="6">
        <MudText Typo="Typo.h4" Class="mb-4">Login</MudText>

        <MudForm @ref="form" OnValidSubmit="HandleLogin">
            <MudTextField T="string" Label="Email"
                          @bind-Value="loginModel.Email"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Email is required" />

            <MudTextField T="string" Label="Password"
                          @bind-Value="loginModel.Password"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Password is required"
                          Class="mt-4" />

            <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-6">
                Login
            </MudButton>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
            }
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    private MudForm form;
    private LoginRequest loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var token = await ApiService.LoginAsync(loginModel);
            NavigationManager.NavigateTo("/explore");
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }
} *@

@* @page "/login"
@inject ApiService Api
@inject NavigationManager Nav


<div style="height:100vh; background: linear-gradient(135deg, #4e54c8, #8f94fb); display:flex; justify-content:center; align-items:center;">
  <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-center align-center" 
              Style="height:100vh; background: linear-gradient(135deg, #4e54c8, #8f94fb);">
        <MudPaper Class="login-card" Elevation="12" Style="width:100%; max-width:420px;">

        <MudStack Spacing="3">
   
            <MudText Typo="Typo.h4" Align="Align.Center" Class="text-white font-bold">
                 Login to SkillExchange
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="text-white-50 mb-4">
                Enter your credentials below
            </MudText>

            <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined" FullWidth="true"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email"
                          Class="glass-input" />

            <MudTextField @bind-Value="password" Label="Password" InputType="InputType.Password"
                          Variant="Variant.Outlined" FullWidth="true"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock"
                          Class="glass-input" />

            <MudText Class="mt-1" Color="Color.Error" Typo="Typo.body2" Align="Align.Center">@error</MudText>


            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                       OnClick="LoginAsync" Class="mt-2 login-btn" Size="Size.Large" Disabled="@isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Class="mr-2" Color="Color.Inherit" />
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </MudButton>

            <MudDivider Class="my-3" />


            <MudText Typo="Typo.body2" Align="Align.Center" Class="text-white-70">
                Don’t have an account?
                <MudLink Href="/register" Class="ml-1 text-primary">Register</MudLink>
            </MudText>
        </MudStack>
    </MudPaper>
    </MudContainer>
</div>
@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string error = string.Empty;
    private bool isLoading = false;

    private async Task LoginAsync()
    {
        isLoading = true;
        error = string.Empty;

        try
        {
            var token = await Api.LoginAsync(new LoginRequest
            {
                Email = email,
                Password = password
            });

            if (!string.IsNullOrEmpty(token))
            {
                Nav.NavigateTo("/explore");
            }
            else
            {
                error = " Invalid credentials or not verified.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
} *@


@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using SkillExchange.Blazor.Models
@using SkillExchange.Blazor.Services
@inject AuthService Auth
@inject NavigationManager Nav
<h3 class="form-title" style="display:flex;justify-content:center">Login</h3>
<div class="form-container">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-input" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="loginModel.Password" type="password" class="form-input" />
        </div>
        <button type="submit" class="btn-primary">Login</button>
        @if (!string.IsNullOrEmpty(message))
        {
            <p class="status">@message</p>
        }
    </EditForm>
</div>

@code {
    private LoginRequest loginModel = new();
    private string? message;
    private async Task HandleLogin()
    {
        @if(string.IsNullOrWhiteSpace(loginModel.Email)|| string.IsNullOrWhiteSpace(loginModel.Password))
        {
            message = "Please enter both email and password";
            return;
        }
        var result = await Auth.LoginAsync(loginModel);
        @if (result != null)
        {
            message = "✅ Login successful!";
            Nav.NavigateTo("/explore");
        }
        else
        {
            message = "❌ Invalid email or password.";
        }
    }
}
